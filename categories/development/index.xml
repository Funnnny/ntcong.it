<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Cong Nguyen</title>
    <link>http://blog.ntcong.it/categories/development/</link>
    <description>Recent content in Development on Cong Nguyen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Feb 2014 17:36:17 +0700</lastBuildDate>
    <atom:link href="http://blog.ntcong.it/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Stripe-CTF Level 1 with Golang</title>
      <link>http://blog.ntcong.it/posts/stripe-ctf-level1-with-golang/</link>
      <pubDate>Fri, 07 Feb 2014 17:36:17 +0700</pubDate>
      
      <guid>http://blog.ntcong.it/posts/stripe-ctf-level1-with-golang/</guid>
      <description>

&lt;p&gt;This year&amp;rsquo;s Stripe-CTF brings some interesting things to the table: Cryptocurrency. I&amp;rsquo;ve already known about cryptocurrency and Bitcoin in general, but it&amp;rsquo;s amazing how Bitcoin relates to Git.&lt;/p&gt;

&lt;p&gt;The level is here:&amp;nbsp;&lt;a href=&#34;https://stripe-ctf.com/levels/1&#34;&gt;https://stripe-ctf.com/levels/1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, like Bitcoin, you have to find a block, in this case is a git commit. The commit must have its hash lower than the target difficulty, specified in the file difficulty.txt. You will compete against a bot, and you have to find and submit a block/commit before it does.&lt;/p&gt;

&lt;p&gt;As I&amp;rsquo;m learning Golang, I wrote my miner using it, and managed to bring to 1MHash/s. Some people are going higher, specifically those using OpenCL/GPU to mine.&lt;/p&gt;

&lt;h3 id=&#34;basic:08a8d9808c645f9e5c4f35caf364b6d7&#34;&gt;Basic&lt;/h3&gt;

&lt;p&gt;The first version of my code is very simple. First it will add myself a Gitcoin to the file &amp;ldquo;LEDGER.txt&amp;rdquo;, get the difficulty, and get the required parameters to build the commit. Those tasks will only do once per block found, so any code will work.&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;diff = make([]byte, 0)
diffString := strings.Trim(doExec(&#34;cat&#34;, &#34;difficulty.txt&#34;), &#34;\n&#34;)
for i := 0; i &lt; len(diffString)/2; i++ {
     n, _ := strconv.ParseInt(diffString[i*2:i*2+2], 16, 0)
     diff = append(diff, byte(n))
}
tree = strings.Trim(doExec(&#34;git&#34;, &#34;write-tree&#34;), &#34;\n&#34;)
parent = strings.Trim(doExec(&#34;git&#34;, &#34;rev-parse&#34;, &#34;HEAD&#34;), &#34;\n&#34;)
timestamp = strings.Trim(doExec(&#34;date&#34;, &#34;+%s&#34;), &#34;\n&#34;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;I calculate diff as a byte array because SHA1 library returned the hash as an array, so I don&amp;rsquo;t have to convert SHA1 everytime; doExec is just a function to run the command and return console output as a string. The commit hash can be calculate by SHA1 the string &amp;ldquo;commit [len_commit]\0[commit_string]&amp;ldquo;. The commit string can be built by this code:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;baseCommit = fmt.Sprintf(&#34;tree %s\nparent %s\nauthor CTF user &amp;lt;%s@stripe-ctf.com&amp;gt; %s +0000\ncommitter CTF user &amp;lt;%s@stripe-ctf.com&amp;gt; %s +0000\n\nFu[4]ny got a Gitcoin\nnonce 1&#34;, tree, parent, username, timestamp, username, timestamp)
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;You should already notice the last &amp;ldquo;nonce 1&amp;rdquo; in the commit string, I will replace it with &amp;ldquo;nonce 2&amp;rdquo; and so on until I find a commit with hash lower than difficulty. It&amp;rsquo;s surprisingly simple:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;func getSHA1(n int) [20]byte {
 return sha1.Sum([]byte(baseCommitHash &lt;complete id=&#34;goog_259276313&#34;&gt;+ &lt;/complete&gt;&#34;\n&#34;))
}
func isHashValid(hash [20]byte) bool {
 for i, char := range hash {
  if i &gt;= len(diff) {
   return false
  }
  if char &gt; diff[i] {
   return false
  }
  if char &lt; diff[i] {
   return true
  }
 }
 return false
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;After finding a coin, I&amp;rsquo;ll write the commit and push it, I was lazy and just pipe everything to command line. It works but maybe a little slow.&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;func pushResult(result chan int, done chan bool) {
    var n int
    for {
        n = &amp;lt;-result
        sem &amp;lt;- 1  // Semaphore git command so only one git command at a time
        c1 := exec.Command(&#34;echo&#34;, getCommit(n, false))
        c2 := exec.Command(&#34;git&#34;, &#34;hash-object&#34;, &#34;-t&#34;, &#34;commit&#34;, &#34;--stdin&#34;, &#34;-w&#34;)
        var err error
        c2.Stdin, err = c1.StdoutPipe()
        if err != nil {
            panic(err)
        }
        c2.Stdout = os.Stdout
        _ = c2.Start()
        _ = c1.Run()
        _ = c2.Wait()
        &amp;lt;-sem
        doExec(&#34;git&#34;, &#34;reset&#34;, &#34;--hard&#34;, fmt.Sprintf(&#34;%x&#34;, getCommitSHA(n)))
        res := doExec(&#34;git&#34;, &#34;push&#34;)
        if res != &#34;error&#34; {
            // done &amp;lt;- true
            // do not stop, just wait for a restart
            time.Sleep(10 * time.Second)
        } else {
            log.Println(&#34;Error when push, waiting for miner to restart&#34;)
            time.Sleep(10 * time.Second)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;Then I just loop nonce until I found a coin. I use a result channel to communicate between miner thread and pushResult thread, and a done channel to stop when I find a commit. The bot takes about 10 mins to find a block, with just this version I managed to beat it.&lt;/p&gt;

&lt;h3 id=&#34;optimize-further:08a8d9808c645f9e5c4f35caf364b6d7&#34;&gt;Optimize further&lt;/h3&gt;

&lt;p&gt;After finishing the task, I can join a Gitcoin instance with all players in Stripe-CTF. I knew that I have to optimize it because I can push it only to 200kH/s&lt;/p&gt;

&lt;p&gt;Fortunately, Go has profiling built-in, so I can easily point out that, most of the time my program was waiting for fmt.Sprintf, because I used it to build the commit message.&lt;/p&gt;

&lt;p&gt;So, because the commit is fixed, just the nonce changes, I was able to prebuilt the commit message and the commit hash, just by giving the commit the fixed length and nonce has 16 number. I thought I can create SHA1 with that prebuilt commit and boost the speed of SHA1 function a lot, but I can&amp;rsquo;t, so removing fmt.Sprintf was good for me.&lt;/p&gt;

&lt;p&gt;And by competing with more people, I have to monitor new block, and restart my miner with a new blockchain. I built a channel into the miner, and another gorountine to monitor and send stop signal.&lt;/p&gt;

&lt;p&gt;Once in a while, the miner will check for stop signal and get out of the loop.&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;select {
case msg := &amp;lt;-stop:
    if msg {
        // fmt.Printf(&#34;Miner %d stopped! Last i is %d\n&#34;, begin, i)
        break jobOuter
    }
default:
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;The monitor function is pretty straightforward, I have two commit hash, last and current, if last commit has different hash than current commit, I do a git hard reset, and send a stop signal.&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;func monitor(stop chan bool) {
    var hash, newHash string
    hash = strings.Trim(doExec(&#34;git&#34;, &#34;rev-parse&#34;, &#34;--short&#34;, &#34;origin/master&#34;), &#34;\n&#34;)
    for {
        doExec(&#34;git&#34;, &#34;fetch&#34;, &#34;origin&#34;)
        newHash = strings.Trim(doExec(&#34;git&#34;, &#34;rev-parse&#34;, &#34;--short&#34;, &#34;origin/master&#34;), &#34;\n&#34;)
        if hash != newHash {
            doExec(&#34;git&#34;, &#34;reset&#34;, &#34;--hard&#34;, &#34;origin/master&#34;)
            // log.Println(&#34;New block found! Reseting miners!&#34;)
            stop &amp;lt;- true
            hash = newHash
            time.Sleep(1 * time.Second)
        }
        time.Sleep(1 * time.Second)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s almost be all, things I can/should do better:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I have to calculate SHA1 again everytime I change nonce. I should calculate a base SHA1, and feed nonce for each loop. I can&amp;rsquo;t find anyway to do this now, so I choose to ignore.&lt;/li&gt;
&lt;li&gt;Calling git by command line is bad, maybe use a git library. Sometimes a push does matter, so implement it directly with socket might be good (just the push)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I ended the game with 756 point, with several Gitcoins found. It&amp;rsquo;s very hard to find a coin because I only have 1.5MH/s with all my PCs, so I need a lucky moment to get one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phiếm bàn chuyện đặt tên</title>
      <link>http://blog.ntcong.it/posts/chuyen_dat_ten/</link>
      <pubDate>Mon, 21 Jan 2013 16:18:00 +0700</pubDate>
      
      <guid>http://blog.ntcong.it/posts/chuyen_dat_ten/</guid>
      <description>&lt;p&gt;Code mình viết ra cũng như con đẻ của mình vậy, chuyện đặt cho nó cái tên để gọi là chuyện vô cùng quan trọng. Đặt tên sao để cho tên nó hay, có ý nghĩa, lại còn phải để người khác dễ gọi, chưa kể là còn phải tránh tên dễ suy luận không là bạn bè của con nó chửi xéo.&lt;/p&gt;

&lt;p&gt;Chắc 100% người đụng vào code đều biết mấy kiểu đặt tên họ:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;viết_thường_kèm_gạch_dưới&lt;/li&gt;
&lt;li&gt;ViếtHoaChữCáiĐầu&lt;/li&gt;
&lt;li&gt;VIẾT_HOA_KÈM_GẠCH&lt;/li&gt;
&lt;li&gt;một vài loại biến thể khác&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ngoài ra một số quy tắc khác như tên biến int thì bắt đầu bằng chữ i, class bắt đầu bằng cls, rồi thì là const thì viết hoa tất, quy tắc thì có lẽ chỉ dành cho project manager ngồi bịa ra viết tài liệu rồi cho các bạn đọc, đọc xong rồi nhớ áp dụng là xong.&lt;/p&gt;

&lt;p&gt;Đã phiếm bàn thì bàn cái gì cho nó hay tí, gọi là &lt;strong&gt;&amp;ldquo;đặt tên một cách thông minh&amp;rdquo;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Đầu tiên có lẽ cần trích đến nguyên tắc đặt tên của Golang: short, concise, evocative; tạm dịch là ngắn gọn, súc tích và tạo ấn tượng.&lt;/p&gt;

&lt;p&gt;Ngắn gọn nhưng súc tích là một điểm đến rất khó khi đặt tên, một vài ví dụ như:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;setup_and_run(new_work, job)&lt;/strong&gt; : ngắn gọn, đầy đủ, rõ nghĩa&lt;/p&gt;

&lt;p&gt;do_setup_and_run: ai chả biết là làm ?&lt;/p&gt;

&lt;p&gt;setup_new_and_run: đã setup&amp;hellip;(new_work) rồi lại còn có new ở tên.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;io.NewIO(),&lt;/strong&gt; &lt;strong&gt;Device.NewDevice():&lt;/strong&gt; trong package A có hàm NewA là một lỗi khá phổ biến, cách đặt thừa tên này dẫn đến việc đọc code rất là căng thẳng.&lt;/p&gt;

&lt;p&gt;Tránh điều này rất đơn giản, ta có thể dùng io.New() nếu cần làm 1 số việc và trả về object IO, hoặc sử dụng trực tiếp io.IO()&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;god.Do(action)&lt;/strong&gt; &lt;strong&gt;và&lt;/strong&gt; &lt;strong&gt;_god.DoOrWaitTilDone(action):&lt;/strong&gt; cách gọi thứ 2 tuy giải thích được việc hàm này sẽ thực hiện hoặc chờ nếu action đã đang thực hiện, tuy nhiên việc này nên đặt trong comment thì hơn là đặt vào tên. Nên nhớ nói dài là nói dại.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. from what import what_exception:&lt;/strong&gt; hay thường được biết đến với dòng from what.what&lt;em&gt;exception import WhatNotFound. Tại sao lại là what.what_exception ? Bỏ cái đoạn what&lt;/em&gt; có làm nó khó hiểu hơn ko ? Có lẽ tự ai cũng hiểu: from what.exception import WhatNotFound&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. from what.exception import WhatNotFound&lt;em&gt;Exception&lt;/em&gt;&lt;/strong&gt;: tại sao ??? WhatNotFound tốt, WhatError tốt, WhatYeahException tốt, NotFoundException vừa trùng lặp lại khó nhớ.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. User.username, User.user_email:&lt;/strong&gt; khỏi nói chắc ai cũng biết là thừa, User.name, User.email là 2 cái tên ngắn gọn và tốt hơn rất nhiều&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. from devices.device import Device:&lt;/strong&gt; move Device import qua &lt;strong&gt;init&lt;/strong&gt; là cách tránh tình trạng này rất dễ dàng, nên để nó là from devices import Device&lt;/p&gt;

&lt;p&gt;Vậy, tránh việc đặt tên xấu như thế nào?&lt;/p&gt;

&lt;p&gt;Thực ra, tên xấu ngay bản thân nó đã thể hiện được cách tránh, đã là cái tên thì phải đọc, đọc lên thấy&amp;hellip;xấu thì phải suy nghĩ ngay:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Tên quá dài:&lt;/strong&gt; đặt 1 cái tên xong thấy nó quá dài, hãy đọc lại thử 1 lần nữa xem nó có vấn đề gì không. Đừng quá ham nhét nhiều thông tin vào tên biến, tên hàm. Súc tích không có nghĩa là đầy đủ thông tin. Dành thời gian thừa khi nghĩ tên vào việc viết document hoặc comment cho rõ ràng.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Tên lặp lại quá nhiều:&lt;/strong&gt; khi gọi vào biến đó hoặc hàm đó, bạn thấy rằng có 1 từ đang lặp lại 2 lần hay thậm chí 3 lần, dừng lại và nghĩ xem tại sao nó lặp lại, và việc lặp lại đó có ý nghĩa gì không. Điều này đúng với cả từ trùng nghĩa lặp lại như NotFoundException.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Tên đọc thấy&amp;hellip;trẹo lưỡi:&lt;/strong&gt; tên xấu, ví dụ như earth.create_a_new_god(), chưa đọc đã thấy nó trẹo cả lưỡi rồi, earth.new_god() có lẽ sẽ tốt hơn rất nhiều, chỉ cần chú ý một chút để sửa.&lt;/p&gt;

&lt;p&gt;Cuối cùng, code mình code ra, tên mình đặt, con mình mình nuôi, thế nên chú ý cho nó cái tên hay một chút, sau này có chuyển cho ai nuôi thì người ta cũng thích. Tất nhiên cũng đừng có nghĩ nhiều quá, đôi khi cũng cần một &lt;em&gt;&amp;ldquo;ngoại lệ&amp;rdquo;&lt;/em&gt; nho nhỏ, bởi vì dù sao, mình đặt tên ra thì mình là người gọi nhiều nhất, đặt theo ý người khác cũng chả vui gì.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;Bài viết bậy viết bạ đánh dấu 2 năm không blog&lt;/em&gt;&amp;nbsp;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>